import asyncio
import logging

from aiogram import Bot, Dispatcher, types
from aiogram.filters.command import Command
from tokens import *

#–≤–∫–ª—é–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–Ω–∏—è —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
#bot's object
bot = Bot(token=TOKEN)
dp = Dispatcher()

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer("Hello!")

async def main():
    await dp.start_polling(bot)

#—Ö—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /test1
@dp.message(Command("test1"))
async def cmd_test1(message: types.Message):
    await message.reply("Test 1")

# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /test2
@dp.message(Command("test2"))
async def cmd_test2(message: types.Message):
    await message.reply("Test 2")

@dp.message(Command("answer"))
async def cmd_answer(message: types.Message):
    await message.answer("–≠—Ç–æ –ø—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç")

@dp.message(Command("reply"))
async def cmd_reply(message: types.Message):
    await message.reply('–≠—Ç–æ –æ—Ç–≤–µ—Ç —Å "–æ—Ç–≤–µ—Ç–æ–º"')

@dp.message(Command("dice"))
async def cmd_dice(message: types.Message):
    await message.answer_dice(emoji="üé≤")


@dp.message(Command("diceC"))
async def cmd_diceC(message: types.Message, bot: Bot):
    await bot.send_dice(keyChannel, emoji="üé≤")
if __name__ == "__main__":
    asyncio.run(main())