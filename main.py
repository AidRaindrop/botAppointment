
from imports import *

#–≤–∫–ª—é–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–Ω–∏—è —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
#bot's object
bot = Bot(token=TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    kb = [
        [
            types.KeyboardButton(text="–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º"),
            types.KeyboardButton(text="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏–∏")
        ],
    ]
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–µ –¥–µ–π—Å—Ç–≤–∏–µ"
    )
    await message.answer("–ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º", reply_markup=keyboard)

async def main():
    await dp.start_polling(bot)

#—Ö—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /test1


# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /test2






@dp.message(F.text, Command("test"))
async def any_message(message:Message):
    await message.answer(
        "Hello, <b>world</b>!",
        parse_mode=ParseMode.HTML
    )

#–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—Ä–∞–Ω–µ–µ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª keyChannel
@dp.message(Command("diceC"))
async def cmd_diceC(message: types.Message, bot: Bot):
    await bot.send_dice(keyChannel, emoji="üé≤")

#–≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–≤–æ–¥, –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ç–µ–∫—Å—Ç –∑–∞—Ä–∞–Ω–µ–µ –Ω–µ –∏–∑–≤–µ—Å—Ç–µ–Ω

#—Ç–∞–∫–æ–π –∂–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–∞–∫ –∏ —Ç–æ—Ç —á—Ç–æ —Ä–ø–∏—à–µ–ª
# @dp.message(F.text)
# async def echo_with_time(message: Message):
#     time_now = datetime.now().strftime('%H:%M')
#
#     added_text = html.underline(f"–°–æ–∑–¥–∞–Ω–æ –≤ {time_now}")
#     await message.answer(f"{message.html_text}\n\n{added_text}", parse_mode="HTML")

if __name__ == "__main__":
    asyncio.run(main())